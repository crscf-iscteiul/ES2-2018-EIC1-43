/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.screens;

import gui.GUI;
import solverandoptimizer.SolverandOptimizer;
import solverandoptimizer.solver.Solver;
import utils.Variable;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 *
 * @author Rafael
 */
public class RunScreen extends javax.swing.JFrame {

    /**
     * Creates new form RunScreen
     */
    public RunScreen() {
        initComponents();
        setLocationRelativeTo(null);
        SetAlgorithmsForVarible(SolverandOptimizer.getInstance().getProblem().getVariables()[0].getType_toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Start = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        JList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        JListRun = new javax.swing.JList<>();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Choose Algorithms");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        JList.setModel(new javax.swing.DefaultListModel<String>());
        JList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(JList);

        JListRun.setModel(new DefaultListModel<String>());
        JListRun.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JListRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JListRunMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(JListRun);

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Remove, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 105, Short.MAX_VALUE)
                        .addComponent(Add)
                        .addGap(93, 93, 93)
                        .addComponent(Remove))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        SelectAlgorithm();
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        DeselectAlgorithm();
    }//GEN-LAST:event_RemoveActionPerformed

    private void JListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JListMouseClicked
        if(evt.getClickCount()==2){
            SelectAlgorithm();
        }
    }//GEN-LAST:event_JListMouseClicked

    private void JListRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JListRunMouseClicked
        if(evt.getClickCount()==2){
            DeselectAlgorithm();
        }
    }//GEN-LAST:event_JListRunMouseClicked

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        ArrayList<String> algorithms = new ArrayList<>();
        for(int i=0; i<JListRun.getModel().getSize(); i++)
            algorithms.add(JListRun.getModel().getElementAt(i));
        if(algorithms.isEmpty())
            JOptionPane.showMessageDialog(this, "No algorithms selected", "Run what?", JOptionPane.INFORMATION_MESSAGE);
        else
            Solver.solve(SolverandOptimizer.getInstance().getProblem().getVariables(), algorithms);
    }//GEN-LAST:event_StartActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        GUI.getInstance().close_screen(this);
    }//GEN-LAST:event_formWindowClosing

    private void SelectAlgorithm(){
        if(JList.getSelectedIndex()>=0) {
            ((DefaultListModel<String>) JListRun.getModel()).addElement(JList.getSelectedValue());
            Object[] objs = ((DefaultListModel<String>) JListRun.getModel()).toArray();
            ArrayList<String> list = new ArrayList<>(Arrays.asList(Arrays.copyOf(objs, objs.length, String[].class)));
            Collections.sort(list);
            ((DefaultListModel<String>) JListRun.getModel()).removeAllElements();
            for (String s : list)
                ((DefaultListModel<String>) JListRun.getModel()).addElement(s);
            ((DefaultListModel<String>) JList.getModel()).remove(JList.getSelectedIndex());
        }
    }

    private void DeselectAlgorithm(){
        if(JListRun.getSelectedIndex()>=0) {
            ((DefaultListModel<String>) JList.getModel()).addElement(JListRun.getSelectedValue());
            Object[] objs = ((DefaultListModel<String>) JList.getModel()).toArray();
            ArrayList<String> list = new ArrayList<>(Arrays.asList(Arrays.copyOf(objs, objs.length, String[].class)));
            Collections.sort(list);
            ((DefaultListModel<String>) JList.getModel()).removeAllElements();
            for (String s : list)
                ((DefaultListModel<String>) JList.getModel()).addElement(s);
            ((DefaultListModel<String>) JListRun.getModel()).removeElement(JListRun.getSelectedValue());
        }
    }

    private void SetAlgorithmsForVarible(String type){
        ArrayList<String> deselected_algorithms = new ArrayList<>(Arrays.asList("AbYSS", "CellDE", "dMPOSO", "GDE3", "GWASFGA", "IBEA", "MOCell", "MOCH", "MOEAD", "MOMBI", "NSGA-II", "NSGA-III", "OMOPSO", "PAES", "PAES2", "RandomSearch", "rNSGA-II", "SMPSO", "SMSEMOA", "SPEA2", "WASFGA"));
        ArrayList<String> selected_algorithms = new ArrayList<>();
        switch (Variable.StringToType(type)){
            case (0):
                selected_algorithms.addAll(Arrays.asList("NSGA-II", "MOCell", "PAES", "RandomSearch", "SMSEMOA"));
                break;
            case (1):
                selected_algorithms.addAll(Arrays.asList("NSGA-II", "GDE3", "IBEA", "MOCell", "MOEAD", "PAES", "RandomSearch", "SMSEMOA"));
                break;
            case (2):
                selected_algorithms.addAll(Arrays.asList("NSGA-II", "MOCell", "MOCH", "PAES", "RandomSearch", "SMSEMOA", "SPEA2"));
                break;
        }
        deselected_algorithms.removeAll(selected_algorithms);
        for(String s : deselected_algorithms)
            ((DefaultListModel<String>)JList.getModel()).addElement(s);
        for(String s : selected_algorithms)
            ((DefaultListModel<String>)JListRun.getModel()).addElement(s);
    }

    public void open(){
        //Show Screen (Thread Safe)
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JList<String> JList;
    private javax.swing.JList<String> JListRun;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Start;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
